
import React, { useState, useCallback } from 'react';
import { generateImage } from '../services/geminiService';
import { AspectRatio } from '../types';
import Spinner from './Spinner';
import AspectRatioSelector from './AspectRatioSelector';

const ImageGenerator: React.FC = () => {
    const [prompt, setPrompt] = useState<string>('');
    const [aspectRatio, setAspectRatio] = useState<AspectRatio>('1:1');
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [generatedImageUrl, setGeneratedImageUrl] = useState<string | null>(null);
    const [error, setError] = useState<string | null>(null);

    const handleGenerate = useCallback(async () => {
        if (!prompt || isLoading) return;

        setIsLoading(true);
        setError(null);
        setGeneratedImageUrl(null);

        try {
            const imageUrl = await generateImage(prompt, aspectRatio);
            setGeneratedImageUrl(imageUrl);
        } catch (err: any) {
            setError(err.message || 'An unexpected error occurred.');
        } finally {
            setIsLoading(false);
        }
    }, [prompt, aspectRatio, isLoading]);

    return (
        <div className="w-full max-w-4xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-8 p-6 bg-slate-800/50 rounded-2xl shadow-2xl border border-slate-700 backdrop-blur-md">
            {/* Left side: Controls */}
            <div className="flex flex-col space-y-6">
                <div>
                    <label htmlFor="prompt" className="block text-lg font-semibold text-slate-200 mb-2">
                        Enter your prompt
                    </label>
                    <textarea
                        id="prompt"
                        value={prompt}
                        onChange={(e) => setPrompt(e.target.value)}
                        placeholder="e.g., A majestic lion wearing a crown, cinematic lighting, hyperrealistic"
                        className="w-full h-40 p-3 bg-slate-700 border-2 border-slate-600 rounded-lg text-slate-100 placeholder-slate-400 focus:ring-2 focus:ring-cyan-400 focus:border-cyan-400 transition-colors duration-200 resize-none"
                        disabled={isLoading}
                    />
                </div>
                
                <AspectRatioSelector selected={aspectRatio} onSelect={setAspectRatio} />

                <button
                    onClick={handleGenerate}
                    disabled={isLoading || !prompt}
                    className="w-full flex items-center justify-center px-6 py-3 text-lg font-bold text-white bg-gradient-to-r from-cyan-500 to-teal-600 rounded-lg shadow-lg hover:from-cyan-600 hover:to-teal-700 focus:outline-none focus:ring-4 focus:ring-cyan-300 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 ease-in-out"
                >
                    {isLoading ? <><Spinner /> <span className="ml-2">Generating...</span></> : 'Generate Image'}
                </button>
            </div>

            {/* Right side: Image Display */}
            <div className="flex items-center justify-center bg-slate-900/50 rounded-lg border-2 border-slate-700 min-h-[300px] md:min-h-full p-4">
                {isLoading && (
                    <div className="text-center">
                        <svg className="animate-spin h-10 w-10 text-cyan-400 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
                        <p className="mt-4 text-slate-400">Your vision is materializing...</p>
                    </div>
                )}
                {error && (
                    <div className="text-center text-red-400 p-4 bg-red-900/50 rounded-lg">
                        <h3 className="font-bold">Generation Failed</h3>
                        <p className="text-sm">{error}</p>
                    </div>
                )}
                {!isLoading && !error && generatedImageUrl && (
                    <div className="w-full h-full">
                         <img 
                            src={generatedImageUrl} 
                            alt="Generated by AI" 
                            className="w-full h-full object-contain rounded-md"
                        />
                    </div>
                )}
                {!isLoading && !error && !generatedImageUrl && (
                    <div className="text-center text-slate-500">
                        <svg xmlns="http://www.w3.org/2000/svg" className="mx-auto h-16 w-16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                        <p className="mt-2">Your generated image will appear here.</p>
                    </div>
                )}
            </div>
        </div>
    );
};

export default ImageGenerator;
